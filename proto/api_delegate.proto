syntax = "proto3";

package api;
import "google/api/annotations.proto";
import "include/graphql.proto";
import "include/pagination.proto";
option go_package = "./api";


message BucketInfoRequest{
  uint64 startEpoch = 1; // Epoch number to start from
  uint64 epochCount = 2; // Number of epochs to query
  string delegateName =3; // Name of the delegate
  pagination.Pagination pagination = 4; //Pagination info
}

message BucketInfoResponse {
  bool exist = 1;
  uint64 count = 2;   
	repeated BucketInfoList  bucketInfoList = 3; 
}

message BucketInfo {
  string voterEthAddress = 1;
	string voterIotexAddress = 2;
	bool isNative = 3;
	string votes = 4;
	string weightedVotes = 5;
	string remainingDuration = 6;
	string startTime = 7;
	bool decay = 8;
  uint64 bucketID = 9;
}

message BucketInfoList {
  uint64 epochNumber = 1;
	uint64 count = 2;
  repeated BucketInfo  bucketInfo = 3;
}

message BookKeepingRequest {
  uint64 startEpoch = 1; // Epoch number to start from
  uint64 epochCount = 2; // Number of epochs to query
  string delegateName =3; // Name of the delegate
  pagination.Pagination pagination = 4; //Pagination info
  uint64 percentage = 5; // Percentage of the reward to be paid to the delegate
  bool includeBlockReward = 6; // whether to include block reward
  bool includeFoundationBonus = 7; // whether to include foundation bonus
}

message BookKeepingResponse {
  bool exist = 1;
  uint64 count = 2;
  repeated DelegateRewardDistribution rewardDistribution = 3;
}

message DelegateRewardDistribution {
  string voterEthAddress = 1;
  string voterIotexAddress = 2;
  string amount = 3;
}

message Productivity {
  bool exist = 1;
  uint64 production = 2;
  uint64 expectedProduction = 3;
}

message ProductivityRequest {
  uint64 startEpoch = 1; // Epoch number to start from
  uint64 epochCount = 2; // Number of epochs to query
  string delegateName =3; // Name of the delegate
}

message ProductivityResponse {
  Productivity productivity = 1;
}

message Reward {
  string blockReward = 1; // block
  string epochReward = 2;
  string foundationBonus = 3;
  bool exist = 4;
}
message RewardRequest {
  uint64 startEpoch = 1; // Epoch number to start from
  uint64 epochCount = 2; // Number of epochs to query
  string delegateName =3; // Name of the delegate
}

message RewardResponse {
  Reward reward = 1;
}

service DelegateService {
  rpc BucketInfo(BucketInfoRequest) returns (BucketInfoResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "BucketInfo"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.BucketInfo"
      body: "*"
    };
  };
  rpc BookKeeping(BookKeepingRequest) returns (BookKeepingResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "BookKeeping"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.BookKeeping"
      body: "*"
    };
  };
  rpc Productivity(ProductivityRequest) returns (ProductivityResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "Productivity"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.Productivity"
      body: "*"
    };
  };
  rpc Reward(RewardRequest) returns (RewardResponse) {
    option (graphql.schema) = {
      type: QUERY
      name: "Reward"
    };
    option (google.api.http) = {
      post: "/api.DelegateService.Reward"
      body: "*"
    };
  };
}
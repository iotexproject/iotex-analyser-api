// Code generated by proroc-gen-graphql, DO NOT EDIT.
package api

import (
	"context"

	"github.com/graphql-go/graphql"
	pagination "github.com/iotexproject/iotex-analyser-api/api/pagination"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_RewardResponse              *graphql.Object      // message RewardResponse in api_delegate.proto
	gql__type_RewardRequest               *graphql.Object      // message RewardRequest in api_delegate.proto
	gql__type_Reward                      *graphql.Object      // message Reward in api_delegate.proto
	gql__type_ProductivityResponse        *graphql.Object      // message ProductivityResponse in api_delegate.proto
	gql__type_ProductivityRequest         *graphql.Object      // message ProductivityRequest in api_delegate.proto
	gql__type_Productivity                *graphql.Object      // message Productivity in api_delegate.proto
	gql__type_DelegateRewardDistribution  *graphql.Object      // message DelegateRewardDistribution in api_delegate.proto
	gql__type_BucketInfoResponse          *graphql.Object      // message BucketInfoResponse in api_delegate.proto
	gql__type_BucketInfoRequest           *graphql.Object      // message BucketInfoRequest in api_delegate.proto
	gql__type_BucketInfoList              *graphql.Object      // message BucketInfoList in api_delegate.proto
	gql__type_BucketInfo                  *graphql.Object      // message BucketInfo in api_delegate.proto
	gql__type_BookKeepingResponse         *graphql.Object      // message BookKeepingResponse in api_delegate.proto
	gql__type_BookKeepingRequest          *graphql.Object      // message BookKeepingRequest in api_delegate.proto
	gql__input_RewardResponse             *graphql.InputObject // message RewardResponse in api_delegate.proto
	gql__input_RewardRequest              *graphql.InputObject // message RewardRequest in api_delegate.proto
	gql__input_Reward                     *graphql.InputObject // message Reward in api_delegate.proto
	gql__input_ProductivityResponse       *graphql.InputObject // message ProductivityResponse in api_delegate.proto
	gql__input_ProductivityRequest        *graphql.InputObject // message ProductivityRequest in api_delegate.proto
	gql__input_Productivity               *graphql.InputObject // message Productivity in api_delegate.proto
	gql__input_DelegateRewardDistribution *graphql.InputObject // message DelegateRewardDistribution in api_delegate.proto
	gql__input_BucketInfoResponse         *graphql.InputObject // message BucketInfoResponse in api_delegate.proto
	gql__input_BucketInfoRequest          *graphql.InputObject // message BucketInfoRequest in api_delegate.proto
	gql__input_BucketInfoList             *graphql.InputObject // message BucketInfoList in api_delegate.proto
	gql__input_BucketInfo                 *graphql.InputObject // message BucketInfo in api_delegate.proto
	gql__input_BookKeepingResponse        *graphql.InputObject // message BookKeepingResponse in api_delegate.proto
	gql__input_BookKeepingRequest         *graphql.InputObject // message BookKeepingRequest in api_delegate.proto
)

func Gql__type_RewardResponse() *graphql.Object {
	if gql__type_RewardResponse == nil {
		gql__type_RewardResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_RewardResponse",
			Fields: graphql.Fields{
				"reward": &graphql.Field{
					Type: Gql__type_Reward(),
				},
			},
		})
	}
	return gql__type_RewardResponse
}

func Gql__type_RewardRequest() *graphql.Object {
	if gql__type_RewardRequest == nil {
		gql__type_RewardRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_RewardRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
				"delegateName": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_RewardRequest
}

func Gql__type_Reward() *graphql.Object {
	if gql__type_Reward == nil {
		gql__type_Reward = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_Reward",
			Fields: graphql.Fields{
				"blockReward": &graphql.Field{
					Type: graphql.String,
				},
				"epochReward": &graphql.Field{
					Type: graphql.String,
				},
				"foundationBonus": &graphql.Field{
					Type: graphql.String,
				},
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__type_Reward
}

func Gql__type_ProductivityResponse() *graphql.Object {
	if gql__type_ProductivityResponse == nil {
		gql__type_ProductivityResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_ProductivityResponse",
			Fields: graphql.Fields{
				"productivity": &graphql.Field{
					Type: Gql__type_Productivity(),
				},
			},
		})
	}
	return gql__type_ProductivityResponse
}

func Gql__type_ProductivityRequest() *graphql.Object {
	if gql__type_ProductivityRequest == nil {
		gql__type_ProductivityRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_ProductivityRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
				"delegateName": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_ProductivityRequest
}

func Gql__type_Productivity() *graphql.Object {
	if gql__type_Productivity == nil {
		gql__type_Productivity = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_Productivity",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"production": &graphql.Field{
					Type: graphql.Int,
				},
				"expectedProduction": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_Productivity
}

func Gql__type_DelegateRewardDistribution() *graphql.Object {
	if gql__type_DelegateRewardDistribution == nil {
		gql__type_DelegateRewardDistribution = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_DelegateRewardDistribution",
			Fields: graphql.Fields{
				"voterEthAddress": &graphql.Field{
					Type: graphql.String,
				},
				"voterIotexAddress": &graphql.Field{
					Type: graphql.String,
				},
				"amount": &graphql.Field{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__type_DelegateRewardDistribution
}

func Gql__type_BucketInfoResponse() *graphql.Object {
	if gql__type_BucketInfoResponse == nil {
		gql__type_BucketInfoResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BucketInfoResponse",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"bucketInfoList": &graphql.Field{
					Type: graphql.NewList(Gql__type_BucketInfoList()),
				},
			},
		})
	}
	return gql__type_BucketInfoResponse
}

func Gql__type_BucketInfoRequest() *graphql.Object {
	if gql__type_BucketInfoRequest == nil {
		gql__type_BucketInfoRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BucketInfoRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
				"delegateName": &graphql.Field{
					Type: graphql.String,
				},
				"pagination": &graphql.Field{
					Type: pagination.Gql__type_Pagination(),
				},
			},
		})
	}
	return gql__type_BucketInfoRequest
}

func Gql__type_BucketInfoList() *graphql.Object {
	if gql__type_BucketInfoList == nil {
		gql__type_BucketInfoList = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BucketInfoList",
			Fields: graphql.Fields{
				"epochNumber": &graphql.Field{
					Type: graphql.Int,
				},
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"bucketInfo": &graphql.Field{
					Type: graphql.NewList(Gql__type_BucketInfo()),
				},
			},
		})
	}
	return gql__type_BucketInfoList
}

func Gql__type_BucketInfo() *graphql.Object {
	if gql__type_BucketInfo == nil {
		gql__type_BucketInfo = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BucketInfo",
			Fields: graphql.Fields{
				"voterEthAddress": &graphql.Field{
					Type: graphql.String,
				},
				"voterIotexAddress": &graphql.Field{
					Type: graphql.String,
				},
				"isNative": &graphql.Field{
					Type: graphql.Boolean,
				},
				"votes": &graphql.Field{
					Type: graphql.String,
				},
				"weightedVotes": &graphql.Field{
					Type: graphql.String,
				},
				"remainingDuration": &graphql.Field{
					Type: graphql.String,
				},
				"startTime": &graphql.Field{
					Type: graphql.String,
				},
				"decay": &graphql.Field{
					Type: graphql.Boolean,
				},
				"bucketID": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_BucketInfo
}

func Gql__type_BookKeepingResponse() *graphql.Object {
	if gql__type_BookKeepingResponse == nil {
		gql__type_BookKeepingResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BookKeepingResponse",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"count": &graphql.Field{
					Type: graphql.Int,
				},
				"rewardDistribution": &graphql.Field{
					Type: graphql.NewList(Gql__type_DelegateRewardDistribution()),
				},
			},
		})
	}
	return gql__type_BookKeepingResponse
}

func Gql__type_BookKeepingRequest() *graphql.Object {
	if gql__type_BookKeepingRequest == nil {
		gql__type_BookKeepingRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BookKeepingRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
				"delegateName": &graphql.Field{
					Type: graphql.String,
				},
				"pagination": &graphql.Field{
					Type: pagination.Gql__type_Pagination(),
				},
				"percentage": &graphql.Field{
					Type: graphql.Int,
				},
				"includeBlockReward": &graphql.Field{
					Type: graphql.Boolean,
				},
				"includeFoundationBonus": &graphql.Field{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__type_BookKeepingRequest
}

func Gql__input_RewardResponse() *graphql.InputObject {
	if gql__input_RewardResponse == nil {
		gql__input_RewardResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_RewardResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"reward": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Reward(),
				},
			},
		})
	}
	return gql__input_RewardResponse
}

func Gql__input_RewardRequest() *graphql.InputObject {
	if gql__input_RewardRequest == nil {
		gql__input_RewardRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_RewardRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_RewardRequest
}

func Gql__input_Reward() *graphql.InputObject {
	if gql__input_Reward == nil {
		gql__input_Reward = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_Reward",
			Fields: graphql.InputObjectConfigFieldMap{
				"blockReward": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"epochReward": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"foundationBonus": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__input_Reward
}

func Gql__input_ProductivityResponse() *graphql.InputObject {
	if gql__input_ProductivityResponse == nil {
		gql__input_ProductivityResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_ProductivityResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"productivity": &graphql.InputObjectFieldConfig{
					Type: Gql__input_Productivity(),
				},
			},
		})
	}
	return gql__input_ProductivityResponse
}

func Gql__input_ProductivityRequest() *graphql.InputObject {
	if gql__input_ProductivityRequest == nil {
		gql__input_ProductivityRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_ProductivityRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_ProductivityRequest
}

func Gql__input_Productivity() *graphql.InputObject {
	if gql__input_Productivity == nil {
		gql__input_Productivity = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_Productivity",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"production": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"expectedProduction": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_Productivity
}

func Gql__input_DelegateRewardDistribution() *graphql.InputObject {
	if gql__input_DelegateRewardDistribution == nil {
		gql__input_DelegateRewardDistribution = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_DelegateRewardDistribution",
			Fields: graphql.InputObjectConfigFieldMap{
				"voterEthAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"voterIotexAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"amount": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
			},
		})
	}
	return gql__input_DelegateRewardDistribution
}

func Gql__input_BucketInfoResponse() *graphql.InputObject {
	if gql__input_BucketInfoResponse == nil {
		gql__input_BucketInfoResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BucketInfoResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"bucketInfoList": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_BucketInfoList()),
				},
			},
		})
	}
	return gql__input_BucketInfoResponse
}

func Gql__input_BucketInfoRequest() *graphql.InputObject {
	if gql__input_BucketInfoRequest == nil {
		gql__input_BucketInfoRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BucketInfoRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.InputObjectFieldConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
		})
	}
	return gql__input_BucketInfoRequest
}

func Gql__input_BucketInfoList() *graphql.InputObject {
	if gql__input_BucketInfoList == nil {
		gql__input_BucketInfoList = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BucketInfoList",
			Fields: graphql.InputObjectConfigFieldMap{
				"epochNumber": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"bucketInfo": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_BucketInfo()),
				},
			},
		})
	}
	return gql__input_BucketInfoList
}

func Gql__input_BucketInfo() *graphql.InputObject {
	if gql__input_BucketInfo == nil {
		gql__input_BucketInfo = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BucketInfo",
			Fields: graphql.InputObjectConfigFieldMap{
				"voterEthAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"voterIotexAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"isNative": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"votes": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"weightedVotes": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"remainingDuration": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"startTime": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"decay": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"bucketID": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_BucketInfo
}

func Gql__input_BookKeepingResponse() *graphql.InputObject {
	if gql__input_BookKeepingResponse == nil {
		gql__input_BookKeepingResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BookKeepingResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"rewardDistribution": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_DelegateRewardDistribution()),
				},
			},
		})
	}
	return gql__input_BookKeepingResponse
}

func Gql__input_BookKeepingRequest() *graphql.InputObject {
	if gql__input_BookKeepingRequest == nil {
		gql__input_BookKeepingRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BookKeepingRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.InputObjectFieldConfig{
					Type: pagination.Gql__input_Pagination(),
				},
				"percentage": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"includeBlockReward": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"includeFoundationBonus": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__input_BookKeepingRequest
}

// graphql__resolver_DelegateService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_DelegateService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_DelegateService creates pointer of service struct
func new_graphql_resolver_DelegateService(conn *grpc.ClientConn) *graphql__resolver_DelegateService {
	return &graphql__resolver_DelegateService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_DelegateService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_DelegateService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"BucketInfo": &graphql.Field{
			Type: Gql__type_BucketInfoResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.ArgumentConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req BucketInfoRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for BucketInfo")
				}
				client := NewDelegateServiceClient(conn)
				resp, err := client.BucketInfo(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC BucketInfo")
				}
				return resp, nil
			},
		},
		"BookKeeping": &graphql.Field{
			Type: Gql__type_BookKeepingResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.ArgumentConfig{
					Type: pagination.Gql__input_Pagination(),
				},
				"percentage": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"includeBlockReward": &graphql.ArgumentConfig{
					Type: graphql.Boolean,
				},
				"includeFoundationBonus": &graphql.ArgumentConfig{
					Type: graphql.Boolean,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req BookKeepingRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for BookKeeping")
				}
				client := NewDelegateServiceClient(conn)
				resp, err := client.BookKeeping(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC BookKeeping")
				}
				return resp, nil
			},
		},
		"Productivity": &graphql.Field{
			Type: Gql__type_ProductivityResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req ProductivityRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for Productivity")
				}
				client := NewDelegateServiceClient(conn)
				resp, err := client.Productivity(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Productivity")
				}
				return resp, nil
			},
		},
		"Reward": &graphql.Field{
			Type: Gql__type_RewardResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req RewardRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for Reward")
				}
				client := NewDelegateServiceClient(conn)
				resp, err := client.Reward(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC Reward")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_DelegateService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterDelegateServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterDelegateServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterDelegateServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service DelegateService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterDelegateServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_DelegateService(conn))
}

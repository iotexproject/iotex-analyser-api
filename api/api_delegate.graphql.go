// Code generated by proroc-gen-graphql, DO NOT EDIT.
package api

import (
	"context"

	"github.com/graphql-go/graphql"
	pagination "github.com/iotexproject/iotex-analyser-api/api/pagination"
	"github.com/pkg/errors"
	"github.com/ysugimoto/grpc-graphql-gateway/runtime"
	"google.golang.org/grpc"
)

var (
	gql__type_DelegateResponse  *graphql.Object      // message DelegateResponse in api_delegate.proto
	gql__type_DelegateRequest   *graphql.Object      // message DelegateRequest in api_delegate.proto
	gql__type_BucketInfoOutput  *graphql.Object      // message BucketInfoOutput in api_delegate.proto
	gql__type_BucketInfoList    *graphql.Object      // message BucketInfoList in api_delegate.proto
	gql__type_BucketInfo        *graphql.Object      // message BucketInfo in api_delegate.proto
	gql__input_DelegateResponse *graphql.InputObject // message DelegateResponse in api_delegate.proto
	gql__input_DelegateRequest  *graphql.InputObject // message DelegateRequest in api_delegate.proto
	gql__input_BucketInfoOutput *graphql.InputObject // message BucketInfoOutput in api_delegate.proto
	gql__input_BucketInfoList   *graphql.InputObject // message BucketInfoList in api_delegate.proto
	gql__input_BucketInfo       *graphql.InputObject // message BucketInfo in api_delegate.proto
)

func Gql__type_DelegateResponse() *graphql.Object {
	if gql__type_DelegateResponse == nil {
		gql__type_DelegateResponse = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_DelegateResponse",
			Fields: graphql.Fields{
				"bucketInfo": &graphql.Field{
					Type: Gql__type_BucketInfoOutput(),
				},
			},
		})
	}
	return gql__type_DelegateResponse
}

func Gql__type_DelegateRequest() *graphql.Object {
	if gql__type_DelegateRequest == nil {
		gql__type_DelegateRequest = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_DelegateRequest",
			Fields: graphql.Fields{
				"startEpoch": &graphql.Field{
					Type: graphql.Int,
				},
				"epochCount": &graphql.Field{
					Type: graphql.Int,
				},
				"delegateName": &graphql.Field{
					Type: graphql.String,
				},
				"pagination": &graphql.Field{
					Type: pagination.Gql__type_Pagination(),
				},
			},
		})
	}
	return gql__type_DelegateRequest
}

func Gql__type_BucketInfoOutput() *graphql.Object {
	if gql__type_BucketInfoOutput == nil {
		gql__type_BucketInfoOutput = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BucketInfoOutput",
			Fields: graphql.Fields{
				"exist": &graphql.Field{
					Type: graphql.Boolean,
				},
				"bucketInfoList": &graphql.Field{
					Type: graphql.NewList(Gql__type_BucketInfoList()),
				},
			},
		})
	}
	return gql__type_BucketInfoOutput
}

func Gql__type_BucketInfoList() *graphql.Object {
	if gql__type_BucketInfoList == nil {
		gql__type_BucketInfoList = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BucketInfoList",
			Fields: graphql.Fields{
				"epochNumber": &graphql.Field{
					Type: graphql.Int,
				},
				"bucketInfo": &graphql.Field{
					Type: graphql.NewList(Gql__type_BucketInfo()),
				},
				"count": &graphql.Field{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__type_BucketInfoList
}

func Gql__type_BucketInfo() *graphql.Object {
	if gql__type_BucketInfo == nil {
		gql__type_BucketInfo = graphql.NewObject(graphql.ObjectConfig{
			Name: "Api_Type_BucketInfo",
			Fields: graphql.Fields{
				"voterEthAddress": &graphql.Field{
					Type: graphql.String,
				},
				"voterIotexAddress": &graphql.Field{
					Type: graphql.String,
				},
				"isNative": &graphql.Field{
					Type: graphql.Boolean,
				},
				"votes": &graphql.Field{
					Type: graphql.String,
				},
				"weightedVotes": &graphql.Field{
					Type: graphql.String,
				},
				"remainingDuration": &graphql.Field{
					Type: graphql.String,
				},
				"startTime": &graphql.Field{
					Type: graphql.String,
				},
				"decay": &graphql.Field{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__type_BucketInfo
}

func Gql__input_DelegateResponse() *graphql.InputObject {
	if gql__input_DelegateResponse == nil {
		gql__input_DelegateResponse = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_DelegateResponse",
			Fields: graphql.InputObjectConfigFieldMap{
				"bucketInfo": &graphql.InputObjectFieldConfig{
					Type: Gql__input_BucketInfoOutput(),
				},
			},
		})
	}
	return gql__input_DelegateResponse
}

func Gql__input_DelegateRequest() *graphql.InputObject {
	if gql__input_DelegateRequest == nil {
		gql__input_DelegateRequest = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_DelegateRequest",
			Fields: graphql.InputObjectConfigFieldMap{
				"startEpoch": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.InputObjectFieldConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
		})
	}
	return gql__input_DelegateRequest
}

func Gql__input_BucketInfoOutput() *graphql.InputObject {
	if gql__input_BucketInfoOutput == nil {
		gql__input_BucketInfoOutput = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BucketInfoOutput",
			Fields: graphql.InputObjectConfigFieldMap{
				"exist": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"bucketInfoList": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_BucketInfoList()),
				},
			},
		})
	}
	return gql__input_BucketInfoOutput
}

func Gql__input_BucketInfoList() *graphql.InputObject {
	if gql__input_BucketInfoList == nil {
		gql__input_BucketInfoList = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BucketInfoList",
			Fields: graphql.InputObjectConfigFieldMap{
				"epochNumber": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
				"bucketInfo": &graphql.InputObjectFieldConfig{
					Type: graphql.NewList(Gql__input_BucketInfo()),
				},
				"count": &graphql.InputObjectFieldConfig{
					Type: graphql.Int,
				},
			},
		})
	}
	return gql__input_BucketInfoList
}

func Gql__input_BucketInfo() *graphql.InputObject {
	if gql__input_BucketInfo == nil {
		gql__input_BucketInfo = graphql.NewInputObject(graphql.InputObjectConfig{
			Name: "Api_Input_BucketInfo",
			Fields: graphql.InputObjectConfigFieldMap{
				"voterEthAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"voterIotexAddress": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"isNative": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
				"votes": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"weightedVotes": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"remainingDuration": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"startTime": &graphql.InputObjectFieldConfig{
					Type: graphql.String,
				},
				"decay": &graphql.InputObjectFieldConfig{
					Type: graphql.Boolean,
				},
			},
		})
	}
	return gql__input_BucketInfo
}

// graphql__resolver_DelegateService is a struct for making query, mutation and resolve fields.
// This struct must be implemented runtime.SchemaBuilder interface.
type graphql__resolver_DelegateService struct {

	// Automatic connection host
	host string

	// grpc dial options
	dialOptions []grpc.DialOption

	// grpc client connection.
	// this connection may be provided by user
	conn *grpc.ClientConn
}

// new_graphql_resolver_DelegateService creates pointer of service struct
func new_graphql_resolver_DelegateService(conn *grpc.ClientConn) *graphql__resolver_DelegateService {
	return &graphql__resolver_DelegateService{
		conn:        conn,
		host:        "localhost:50051",
		dialOptions: []grpc.DialOption{},
	}
}

// CreateConnection() returns grpc connection which user specified or newly connected and closing function
func (x *graphql__resolver_DelegateService) CreateConnection(ctx context.Context) (*grpc.ClientConn, func(), error) {
	// If x.conn is not nil, user injected their own connection
	if x.conn != nil {
		return x.conn, func() {}, nil
	}

	// Otherwise, this handler opens connection with specified host
	conn, err := grpc.DialContext(ctx, x.host, x.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	return conn, func() { conn.Close() }, nil
}

// GetQueries returns acceptable graphql.Fields for Query.
func (x *graphql__resolver_DelegateService) GetQueries(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{
		"GetBucketInfo": &graphql.Field{
			Type: Gql__type_DelegateResponse(),
			Args: graphql.FieldConfigArgument{
				"startEpoch": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"epochCount": &graphql.ArgumentConfig{
					Type: graphql.Int,
				},
				"delegateName": &graphql.ArgumentConfig{
					Type: graphql.String,
				},
				"pagination": &graphql.ArgumentConfig{
					Type: pagination.Gql__input_Pagination(),
				},
			},
			Resolve: func(p graphql.ResolveParams) (interface{}, error) {
				var req DelegateRequest
				if err := runtime.MarshalRequest(p.Args, &req, false); err != nil {
					return nil, errors.Wrap(err, "Failed to marshal request for GetBucketInfo")
				}
				client := NewDelegateServiceClient(conn)
				resp, err := client.GetBucketInfo(p.Context, &req)
				if err != nil {
					return nil, errors.Wrap(err, "Failed to call RPC GetBucketInfo")
				}
				return resp, nil
			},
		},
	}
}

// GetMutations returns acceptable graphql.Fields for Mutation.
func (x *graphql__resolver_DelegateService) GetMutations(conn *grpc.ClientConn) graphql.Fields {
	return graphql.Fields{}
}

// Register package divided graphql handler "without" *grpc.ClientConn,
// therefore gRPC connection will be opened and closed automatically.
// Occasionally you may worry about open/close performance for each handling graphql request,
// then you can call RegisterDelegateServiceGraphqlHandler with *grpc.ClientConn manually.
func RegisterDelegateServiceGraphql(mux *runtime.ServeMux) error {
	return RegisterDelegateServiceGraphqlHandler(mux, nil)
}

// Register package divided graphql handler "with" *grpc.ClientConn.
// this function accepts your defined grpc connection, so that we reuse that and never close connection inside.
// You need to close it maunally when application will terminate.
// Otherwise, you can specify automatic opening connection with ServiceOption directive:
//
// service DelegateService {
//    option (graphql.service) = {
//        host: "host:port"
//        insecure: true or false
//    };
//
//    ...with RPC definitions
// }
func RegisterDelegateServiceGraphqlHandler(mux *runtime.ServeMux, conn *grpc.ClientConn) error {
	return mux.AddHandler(new_graphql_resolver_DelegateService(conn))
}

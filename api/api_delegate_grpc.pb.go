// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DelegateServiceClient is the client API for DelegateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DelegateServiceClient interface {
	GetBucketInfo(ctx context.Context, in *DelegateRequest, opts ...grpc.CallOption) (*DelegateResponse, error)
}

type delegateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDelegateServiceClient(cc grpc.ClientConnInterface) DelegateServiceClient {
	return &delegateServiceClient{cc}
}

func (c *delegateServiceClient) GetBucketInfo(ctx context.Context, in *DelegateRequest, opts ...grpc.CallOption) (*DelegateResponse, error) {
	out := new(DelegateResponse)
	err := c.cc.Invoke(ctx, "/api.DelegateService/GetBucketInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DelegateServiceServer is the server API for DelegateService service.
// All implementations must embed UnimplementedDelegateServiceServer
// for forward compatibility
type DelegateServiceServer interface {
	GetBucketInfo(context.Context, *DelegateRequest) (*DelegateResponse, error)
	mustEmbedUnimplementedDelegateServiceServer()
}

// UnimplementedDelegateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDelegateServiceServer struct {
}

func (UnimplementedDelegateServiceServer) GetBucketInfo(context.Context, *DelegateRequest) (*DelegateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBucketInfo not implemented")
}
func (UnimplementedDelegateServiceServer) mustEmbedUnimplementedDelegateServiceServer() {}

// UnsafeDelegateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DelegateServiceServer will
// result in compilation errors.
type UnsafeDelegateServiceServer interface {
	mustEmbedUnimplementedDelegateServiceServer()
}

func RegisterDelegateServiceServer(s grpc.ServiceRegistrar, srv DelegateServiceServer) {
	s.RegisterService(&DelegateService_ServiceDesc, srv)
}

func _DelegateService_GetBucketInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelegateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DelegateServiceServer).GetBucketInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.DelegateService/GetBucketInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DelegateServiceServer).GetBucketInfo(ctx, req.(*DelegateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DelegateService_ServiceDesc is the grpc.ServiceDesc for DelegateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DelegateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DelegateService",
	HandlerType: (*DelegateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBucketInfo",
			Handler:    _DelegateService_GetBucketInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api_delegate.proto",
}
